AWS EC2 Instance Tag Checker Lambda Tutorial

Objective:
This script is designed to monitor the creation of EC2 instances and send notifications when a newly created EC2 instance has a specific tag (Cost=Dummy).

Services used:
Lambda: AWS service to run code in response to events.
EC2: AWS Elastic Compute Cloud where virtual servers (instances) are provisioned.
SNS (Simple Notification Service): AWS service to send notifications.
CloudWatch Events/EventBridge: Triggers the Lambda function when specific AWS events occur.
Python Libraries:
boto3: The Amazon Web Services (AWS) SDK for Python. It allows Python developers to write software that makes use of AWS services.
time: Built-in Python library for time-related tasks.


Code Walkthrough:

Library Imports:
import boto3
import time
This imports necessary libraries.

Lambda Handler Function:
The primary function that AWS Lambda invokes when the service runs the code.

def lambda_handler(event, context):
Wait Period:
time.sleep(10)
The function waits for 10 seconds. This is done to allow some time for the EC2 instance tags to be applied after the instance creation event is detected.

Setup:
sns_topic_arn = "arn name"
ec2_client = boto3.client('ec2', region_name='ap-southeast-2')
sns_client = boto3.client('sns', region_name='ap-southeast-2')
Define the ARN (Amazon Resource Name) of the SNS topic where notifications will be sent.
Initialize the EC2 and SNS clients using the boto3 library to interact with AWS services.

Extract User Information:
user_arn = event['detail']['userIdentity']['arn']
Obtain the ARN of the AWS user or service responsible for the action that triggered the Lambda function.

Extract EC2 Instance IDs from the Event:
instances = event['detail']['responseElements']['instancesSet']['items']
instance_ids = [instance['instanceId'] for instance in instances]
The AWS event that triggers the Lambda function contains information about the EC2 instances that were created. This step extracts the IDs of those instances.

Loop Through Each Instance:
for instance_id in instance_ids:
Since it's possible to start multiple instances at once, the code loops through each instance ID.

Fetch Instance Tags:
response = ec2_client.describe_instances(InstanceIds=[instance_id])
instance_tags = response['Reservations'][0]['Instances'][0].get('Tags', [])


Here, the code queries the EC2 service to get all tags associated with the specific instance.

Check for Desired Tag:
for tag in instance_tags:
    if tag['Key'] == 'Cost' and tag['Value'] == 'Dummy':
        desired_tag_found = True
        break
It then checks if the instance has a tag with the key "Cost" and a value of "Dummy".

Send Alert:
if desired_tag_found:
    sns_client.publish(
        TopicArn=sns_topic_arn,
        Subject='EC2 Instance with Desired Tag Alert',
        Message=f"EC2 instance with ID {instance_id} has been created with the desired tag Cost=Dummy by user {user_arn}!"
    )
If the desired tag is found on the instance, an alert is sent using SNS to the specified topic.

Lambda Response:
return {
    'statusCode': 200,
    'body': f"Checked tags for instances: {', '.join(instance_ids)}."
}
The Lambda function then returns a response with a status code of 200 (indicating success) and a message indicating which instances were checked.

End of Tutorial.


This script, when paired with the correct AWS CloudWatch Event or EventBridge rule, allows for real-time monitoring and alerting of EC2 instances based on specific tag values.

CloudWatch Events/EventBridge Rule Configuration Explanation
Objective:
The purpose of this rule is to trigger a Lambda function when a new EC2 instance is launched (not for restarts).

Components of the Rule:

Source:
"source": ["aws.ec2"],
source specifies the AWS service that is the source of the events. In this case, it's AWS EC2.

Detail Type:
"detail-type": ["AWS API Call via CloudTrail"],
detail-type narrows down the events based on the type of detail provided. Here, it's filtering events that are related to AWS API calls captured through CloudTrail.

Detail:
"detail": {
  "eventSource": ["ec2.amazonaws.com"],
  "eventName": ["RunInstances"]
}
detail further specifies criteria for filtering events:
eventSource: It ensures that the source of the event is ec2.amazonaws.com, which means it's an EC2-related event.
eventName: It further filters events by selecting only those with the name RunInstances. This specific event name indicates the action of launching new EC2 instances.

Explanation:
This rule is designed to be selective and trigger only when the following conditions are met:

The source of the event is AWS EC2.
The event is an AWS API call captured through CloudTrail.
The specific API call related to launching new EC2 instances, named RunInstances, is detected.
As a result, the rule ensures that the Lambda function associated with it is executed only when new EC2 instances are created and not when existing instances are restarted. It's a key part of the solution to filter out the relevant events and trigger the Lambda function at the right time.



IAM Role Policy Configuration Explanation
Objective:
This IAM policy attached to the Lambda function defines the permissions and actions that the Lambda function is allowed to perform. It ensures that the Lambda function has the necessary permissions to interact with AWS services, specifically SNS, EC2, and CloudWatch Logs.

Policy Components:
Version:
"Version": "2012-10-17",
This specifies the version of the IAM policy language being used.
Statement:
"Statement": [
    {
        "Sid": "VisualEditor0",
        "Effect": "Allow",
        "Action": [
            "sns:Publish",
            "ec2:DescribeInstances",
            "logs:PutLogEvents",
            "logs:CreateLogStream",
            "logs:CreateLogGroup"
        ],
        "Resource": "*"
    }
]
Statement defines a list of policy statements, and in this case, there's one statement.

Statement Details:
Sid (Statement ID):
"Sid": "VisualEditor0",
A unique identifier for this statement, often used for reference and readability.
Effect:
"Effect": "Allow",
Specifies the effect of the statement, which is set to "Allow." This means that the actions listed in the statement are permitted.


Action:
"Action": [
    "sns:Publish",
    "ec2:DescribeInstances",
    "logs:PutLogEvents",
    "logs:CreateLogStream",
    "logs:CreateLogGroup"
],
Lists the AWS actions that are allowed by this policy. In this case, the Lambda function is allowed to perform the following actions:
sns:Publish: Publish messages to SNS topics.
ec2:DescribeInstances: Describe (read information about) EC2 instances.
logs:PutLogEvents: Add log events to CloudWatch Logs.
logs:CreateLogStream: Create log streams in CloudWatch Logs.
logs:CreateLogGroup: Create log groups in CloudWatch Logs.

Resource:
"Resource": "*"
The Resource field specifies the AWS resources to which this policy applies. In this case, it's set to "*" (a wildcard), which means the policy applies to all resources. The Lambda function is allowed to perform the specified actions on any resource.

Explanation:
This IAM policy provides the Lambda function with the necessary permissions to carry out its tasks effectively:

sns:Publish: Allows the Lambda function to publish messages to SNS topics, which is used to send notifications.
ec2:DescribeInstances: Grants the Lambda function permission to retrieve information about EC2 instances. It's essential for checking tags and other instance details.
logs:PutLogEvents: Enables the Lambda function to add log events to CloudWatch Logs. This is crucial for logging the execution of the function.
logs:CreateLogStream and logs:CreateLogGroup: Permits the Lambda function to create log streams and log groups in CloudWatch Logs if they don't already exist. This ensures that logs can be organized properly.
The "Resource": "*" wildcard means that these permissions apply to all AWS resources, allowing the Lambda function to operate across the entire AWS account. The Lambda function will use these permissions when interacting with the specified AWS services.

This policy is tailored to the specific needs of the Lambda function, allowing it to perform actions relevant to monitoring EC2 instances and sending notifications.




